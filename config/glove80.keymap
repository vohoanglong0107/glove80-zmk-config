// vim: nowrap

/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */

//////////////////////////////////////////////////////////////////////////////
//
// Long's Glove80 Keymap
// Based on Sunakus's "Glorious Engrammer" v35
// - https://github.com/sunaku/glove80-keymaps
//
//////////////////////////////////////////////////////////////////////////////

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* #define for layers */
#define LAYER_Engrammer 0
#define LAYER_Typing 1
#define LAYER_LeftPinky 2
#define LAYER_LeftRing1 3
#define LAYER_LeftMiddy 4
#define LAYER_LeftIndex 5
#define LAYER_RightPinky 6
#define LAYER_RightRing1 7
#define LAYER_RightMiddy 8
#define LAYER_RightIndex 9
#define LAYER_Number 10
#define LAYER_Cursor 11
#define LAYER_Function 12
#define LAYER_Symbol 13
#define LAYER_System 14
#define LAYER_Gaming 15
#define LAYER_Factory 16
#define LAYER_Lower 17
#define LAYER_Magic 18

//
// The *_FINGER_MOD specify which modifiers are used by home row mod keys.
//
#define PINKY_FINGER_MOD LALT
#define RING1_FINGER_MOD LGUI
#define MIDDY_FINGER_MOD LCTL
#define INDEX_FINGER_MOD LSFT

//
// HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
// for the pinky, ring, and middle fingers (which are assigned to Super,
// Alt, and Ctrl respectively in the Miryoku system) on home row keys.
// Since this is bilateral, setting holding type to balanced won't cause misfired
// by rolling keys, since keys rolling can only happen on the same hand,
// on the same side of the keyboard
//
#define HOMEY_HOLDING_TYPE "balanced"

//
// HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
// home row mod keys in order to send their modifiers to the computer
// (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
//
#define HOMEY_HOLDING_TIME 270 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER

//
// HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
// after typing before you can use home row mods again.  It prevents
// unintended activation of home row mods when you're actively typing.
//
#define HOMEY_STREAK_DECAY 250

//
// HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
// after tapping a key to hold it again in order to make it auto-repeat.
//
#define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat

//
// INDEX_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
// for index fingers (which Miryoku assigns to Shift) on home row keys.
//
// NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
// allows faster activation of the Shift modifier (without having to wait
// for the modified key to be released as the "balanced" flavor requires).
// Typing streaks and the `hold-trigger-on-release` setting are disabled
// for the index fingers so as not to hinder their speed and dexterity.
//
#define INDEX_HOLDING_TYPE "tap-preferred"

//
// INDEX_HOLDING_TIME defines how long you need to hold (milliseconds)
// index finger keys in order to send their modifiers to the computer
// (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
//
#define INDEX_HOLDING_TIME 170

//
// INDEX_STREAK_DECAY defines how long you need to wait (milliseconds)
// after typing before you can use home row mods again.  It prevents
// unintended activation of home row mods when you're actively typing.
//
#define INDEX_STREAK_DECAY 150

//
// INDEX_REPEAT_DECAY defines how much time you have left (milliseconds)
// after tapping a key to hold it again in order to make it auto-repeat.
//
#define INDEX_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat

//
// THUMB_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
// for the thumbs (which are assigned to 6 layers in the Miryoku system).
//
// NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
// activation for the symbol layer (if the tapped symbol key is released
// while the thumb layer key is still held down) for quicker programming.
//
#define THUMB_HOLDING_TYPE "balanced"

//
// THUMB_HOLDING_TIME defines how long you need to hold (milliseconds)
// a thumb key to activate a layer.  Shorter holds are treated as taps.
//
#define THUMB_HOLDING_TIME 300

//
// THUMB_REPEAT_DECAY defines how much time you have left (milliseconds)
// after tapping a key to hold it again in order to make it auto-repeat.
//
#define THUMB_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat

//
// SPACE_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
// for spacebar (assigned to the right thumb's home position by default).
//
// NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
// activation for the symbol layer (if the tapped symbol key is released
// while the thumb layer key is still held down) for quicker programming.
//
#define SPACE_HOLDING_TYPE THUMB_HOLDING_TYPE

//
// SPACE_HOLDING_TIME defines how long you need to hold (milliseconds)
// the space thumb key to activate.  Shorter holds are treated as taps.
//
#define SPACE_HOLDING_TIME THUMB_HOLDING_TIME

//
// SPACE_REPEAT_DECAY defines how much time you have left (milliseconds)
// after tapping a key to hold it again in order to make it auto-repeat.
//
#define SPACE_REPEAT_DECAY 150

#define _C      LC
#define _A_TAB  LALT
#define _G_TAB  LGUI
#define _REDO   _C(Y)
#define _POWER  C_POWER
#define _W      _C
#define _HOME   HOME
#define _END    END
#define _SLEEP      C_SLEEP
#define _LOCK   K_LOCK
#define _UNDO       _C(Z)
#define _CUT        _C(X)
#define _COPY       _C(C)
#define _PASTE      _C(V)
#define _FIND       _C(F)
#define _FIND_NEXT  _C(G)
#define _FIND_PREV  _C(LS(G))

#define _KP_N0 N0
#define _KP_N1 N1
#define _KP_N2 N2
#define _KP_N3 N3
#define _KP_N4 N4
#define _KP_N5 N5
#define _KP_N6 N6
#define _KP_N7 N7
#define _KP_N8 N8
#define _KP_N9 N9
#define _KP_PLUS PLUS
#define _KP_MINUS MINUS
#define _KP_ASTERISK ASTERISK
#define _KP_SLASH SLASH
#define _KP_COMMA COMMA
#define _KP_DOT DOT
#define _KP_EQUAL EQUAL
#define _KP_ENTER ENTER

//
// Glove80 specific symbol overrides to support non "en-US" locales
//
#undef  AMPS
#define AMPS  LS(N7)
#undef  AT
#define AT    LS(N2)
#undef  CARET
#define CARET LS(N6)
#undef  COLON
#define COLON LS(SEMI)
#undef  DLLR
#define DLLR  LS(N4)
#undef  DQT
#define DQT   LS(SQT)
#undef  EXCL
#define EXCL  LS(N1)
#undef  GT
#define GT    LS(DOT)
#undef  HASH
#define HASH  LS(N3)
#undef  LBRC
#define LBRC  LS(LBKT)
#undef  LPAR
#define LPAR  LS(N9)
#undef  LT
#define LT    LS(COMMA)
#undef  PIPE
#define PIPE  LS(BSLH)
#undef  PLUS
#define PLUS  LS(EQUAL)
#undef  PRCNT
#define PRCNT LS(N5)
#undef  QMARK
#define QMARK LS(FSLH)
#undef  RBRC
#define RBRC  LS(RBKT)
#undef  RPAR
#define RPAR  LS(N0)
#undef  STAR
#define STAR  LS(N8)
#undef  TILDE
#define TILDE LS(GRAVE)
#undef  UNDER
#define UNDER LS(MINUS)

//
// Keymap specific knowledge of the base layer's alpha + ZMK layout
//
#define KEY_LH_C6R1 F1
#define KEY_LH_C5R1 F2
#define KEY_LH_C4R1 F3
#define KEY_LH_C3R1 F4
#define KEY_LH_C2R1 F5
#define KEY_RH_C2R1 F6
#define KEY_RH_C3R1 F7
#define KEY_RH_C4R1 F8
#define KEY_RH_C5R1 F9
#define KEY_RH_C6R1 F10
#define KEY_LH_C6R2 EQUAL
#define KEY_LH_C5R2 N1
#define KEY_LH_C4R2 N2
#define KEY_LH_C3R2 N3
#define KEY_LH_C2R2 N4
#define KEY_LH_C1R2 N5
#define KEY_RH_C1R2 N6
#define KEY_RH_C2R2 N7
#define KEY_RH_C3R2 N8
#define KEY_RH_C4R2 N9
#define KEY_RH_C5R2 N0
#define KEY_RH_C6R2 BSLH
#define KEY_LH_C6R3 GRAVE
#define KEY_LH_C5R3 B
#define KEY_LH_C4R3 Y
#define KEY_LH_C3R3 O
#define KEY_LH_C2R3 U
#define KEY_LH_C1R3 SQT
#define KEY_RH_C1R3 SEMI
#define KEY_RH_C2R3 L
#define KEY_RH_C3R3 D
#define KEY_RH_C4R3 W
#define KEY_RH_C5R3 V
#define KEY_RH_C6R3 Z
#define KEY_LH_C6R4 0
#define KEY_LH_C5R4 C
#define KEY_LH_C4R4 I
#define KEY_LH_C3R4 E
#define KEY_LH_C2R4 A
#define KEY_LH_C1R4 COMMA
#define KEY_RH_C1R4 DOT
#define KEY_RH_C2R4 H
#define KEY_RH_C3R4 T
#define KEY_RH_C4R4 S
#define KEY_RH_C5R4 N
#define KEY_RH_C6R4 Q
#define KEY_LH_C6R5 LSHFT
#define KEY_LH_C5R5 G
#define KEY_LH_C4R5 X
#define KEY_LH_C3R5 J
#define KEY_LH_C2R5 K
#define KEY_LH_C1R5 MINUS
#define KEY_LH_T1 ESC
#define KEY_LH_T2 LEFT
#define KEY_LH_T3 DOWN
#define KEY_RH_T3 UP
#define KEY_RH_T2 RIGHT
#define KEY_RH_T1 ENTER
#define KEY_RH_C1R5 FSLH
#define KEY_RH_C2R5 R
#define KEY_RH_C3R5 M
#define KEY_RH_C4R5 F
#define KEY_RH_C5R5 P
#define KEY_RH_C6R5 RSHFT
#define KEY_LH_C6R6 0
#define KEY_LH_C5R6 HOME
#define KEY_LH_C4R6 PG_UP
#define KEY_LH_C3R6 PG_DN
#define KEY_LH_C2R6 END
#define KEY_LH_T4 BACKSPACE
#define KEY_LH_T5 DELETE
#define KEY_LH_T6 LSFT
#define KEY_RH_T6 LSFT
#define KEY_RH_T4 SPACE
#define KEY_RH_C2R6 TAB
#define KEY_RH_C3R6 LBKT
#define KEY_RH_C4R6 RBKT
#define KEY_RH_C5R6 RPAR
#define KEY_RH_C6R6 0

/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* Custom Defined Behaviors */
/ {
    // hold-trigger-on-release to wait for other home row mods
    #define HMR_BILATERAL_COMMON_PROPERTIES \
            compatible = "zmk,behavior-hold-tap"; \
            hold-trigger-on-release; \
            #binding-cells = <2>

    #define HMR_BILATERAL_INDEX_PROPERTIES \
            flavor = INDEX_HOLDING_TYPE; \
            tapping-term-ms = <INDEX_HOLDING_TIME>; \
            quick-tap-ms = <INDEX_REPEAT_DECAY>; \
            require-prior-idle-ms = <INDEX_STREAK_DECAY>

    #define HMR_BILATERAL_HOMEY_PROPERTIES \
            flavor = HOMEY_HOLDING_TYPE; \
            tapping-term-ms = <HOMEY_HOLDING_TIME>; \
            quick-tap-ms = <HOMEY_REPEAT_DECAY>; \
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>

    #define HMR_LEFT_BILATERAL(NAME, HOLD_BEHAVIOR, POSITIONAL_PROPS) \
        NAME: homey_##NAME { \
            HMR_BILATERAL_COMMON_PROPERTIES; \
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>; \
            bindings = <HOLD_BEHAVIOR>, <&kp>; \
            POSITIONAL_PROPS; \
        };

    #define HMR_RIGHT_BILATERAL(NAME, HOLD_BEHAVIOR, POSITIONAL_PROPS) \
        NAME: homey_##NAME { \
            HMR_BILATERAL_COMMON_PROPERTIES; \
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>; \
            bindings = <HOLD_BEHAVIOR>, <&kp>; \
            POSITIONAL_PROPS; \
        };

    #define HMR_LEFT_BILATERAL_2ND_LEVER(NAME, TAP_BEHAVIOR, POSITIONAL_PROPS) \
        NAME: homey_##NAME { \
            HMR_BILATERAL_COMMON_PROPERTIES; \
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>; \
            bindings = <&kp>, <TAP_BEHAVIOR>; \
            POSITIONAL_PROPS; \
        };

    #define HMR_RIGHT_BILATERAL_2ND_LEVER(NAME, TAP_BEHAVIOR, POSITIONAL_PROPS) \
        NAME: homey_##NAME { \
            HMR_BILATERAL_COMMON_PROPERTIES; \
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>; \
            bindings = <&kp>, <TAP_BEHAVIOR>; \
            POSITIONAL_PROPS; \
        };

    #define HMR_HOLD(NAME, TRIGGERED_LAYER) \
        NAME: homey_##NAME { \
            compatible = "zmk,behavior-macro-one-param"; \
            wait-ms = <0>; \
            tap-ms = <0>; \
            #binding-cells = <1>; \
            bindings \
                = <&macro_param_1to1> \
                , <&macro_press &kp MACRO_PLACEHOLDER \
                                &mo TRIGGERED_LAYER> \
                , <&macro_pause_for_release> \
                , <&macro_param_1to1> \
                , <&macro_release &kp MACRO_PLACEHOLDER \
                                  &mo TRIGGERED_LAYER> \
                ; \
        };

    #define HMR_TAP(NAME, TAP_KEY) \
        NAME: homey_##NAME { \
            compatible = "zmk,behavior-macro-one-param"; \
            wait-ms = <0>; \
            tap-ms = <0>; \
            #binding-cells = <1>; \
            bindings \
                = <&macro_release \
                    &kp LSFT &kp RSFT \
                    &kp LALT &kp RALT \
                    &kp LCTL &kp RCTL \
                    &kp LGUI &kp RGUI> \
                , <&macro_tap &kp TAP_KEY> \
                , <&macro_param_1to1> \
                , <&macro_tap &kp MACRO_PLACEHOLDER> \
                ; \
        };

    behaviors {

        //
        // Glove80 key positions index for positional hold-tap
        // - https://discord.com/channels/877392805654306816/937645688244826154/1066713913351221248
        // - https://media.discordapp.net/attachments/937645688244826154/1066713913133121556/image.png
        //
        // |------------------------|------------------------|
        // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
        // |                        |                        |
        // |  0  1  2  3  4         |          5  6  7  8  9 |
        // | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
        // | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
        // | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
        // | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
        // | 64 65 66 67 68         |         75 76 77 78 79 |
        // |                69 52   |   57 74                |
        // |                 70 53  |  56 73                 |
        // |                  71 54 | 55 72                  |
        // |------------------------|------------------------|
        //
        #define LEFT_HAND_KEYS      \
              0  1  2  3  4         \
             10 11 12 13 14 15      \
             22 23 24 25 26 27      \
             34 35 36 37 38 39      \
             46 47 48 49 50 51      \
             64 65 66 67 68
        #define RIGHT_HAND_KEYS     \
                                               5  6  7  8  9 \
                                           16 17 18 19 20 21 \
                                           28 29 30 31 32 33 \
                                           40 41 42 43 44 45 \
                                           58 59 60 61 62 63 \
                                              75 76 77 78 79
        #define THUMB_KEYS          \
                            69 52       57 74                \
                             70 53     56 73                 \
                              71 54   55 72

        #define LEFT_PINKY_KEY  KEY_LH_C5R4
        #define LEFT_RING1_KEY  KEY_LH_C4R4
        #define LEFT_MIDDY_KEY  KEY_LH_C3R4
        #define LEFT_INDEX_KEY  KEY_LH_C2R4

        #define RIGHT_PINKY_KEY KEY_RH_C5R4
        #define RIGHT_RING1_KEY KEY_RH_C4R4
        #define RIGHT_MIDDY_KEY KEY_RH_C3R4
        #define RIGHT_INDEX_KEY KEY_RH_C2R4

        //
        // Home row mods with bilateral combinations support
        //
        HMR_LEFT_BILATERAL(left_pinky_bilateral, &left_pinky_hold, HMR_BILATERAL_HOMEY_PROPERTIES)
        HMR_HOLD(left_pinky_hold, LAYER_LeftPinky)
        HMR_TAP(left_pinky_tap, LEFT_PINKY_KEY)
        #define LeftPinky(key) left_pinky_bilateral PINKY_FINGER_MOD key

        HMR_RIGHT_BILATERAL(right_pinky_bilateral, &right_pinky_hold, HMR_BILATERAL_HOMEY_PROPERTIES)
        HMR_HOLD(right_pinky_hold, LAYER_RightPinky)
        HMR_TAP(right_pinky_tap, RIGHT_PINKY_KEY)
        #define RightPinky(key) right_pinky_bilateral PINKY_FINGER_MOD key

        HMR_LEFT_BILATERAL(left_ring1_bilateral, &left_ring1_hold, HMR_BILATERAL_HOMEY_PROPERTIES)
        HMR_HOLD(left_ring1_hold, LAYER_LeftRing1)
        HMR_TAP(left_ring1_tap, LEFT_RING1_KEY)
        #define LeftRing1(key) left_ring1_bilateral RING1_FINGER_MOD key

        HMR_RIGHT_BILATERAL(right_ring1_bilateral, &right_ring1_hold, HMR_BILATERAL_HOMEY_PROPERTIES)
        HMR_HOLD(right_ring1_hold, LAYER_RightRing1)
        HMR_TAP(right_ring1_tap, RIGHT_RING1_KEY)
        #define RightRing1(key) right_ring1_bilateral RING1_FINGER_MOD key

        HMR_LEFT_BILATERAL(left_middy_bilateral, &left_middy_hold, HMR_BILATERAL_HOMEY_PROPERTIES)
        HMR_HOLD(left_middy_hold, LAYER_LeftMiddy)
        HMR_TAP(left_middy_tap, LEFT_MIDDY_KEY)
        #define LeftMiddy(key) left_middy_bilateral MIDDY_FINGER_MOD key

        HMR_RIGHT_BILATERAL(right_middy_bilateral, &right_middy_hold, HMR_BILATERAL_HOMEY_PROPERTIES)
        HMR_HOLD(right_middy_hold, LAYER_RightMiddy)
        HMR_TAP(right_middy_tap, RIGHT_MIDDY_KEY)
        #define RightMiddy(key) right_middy_bilateral MIDDY_FINGER_MOD key

        HMR_LEFT_BILATERAL(left_index_bilateral, &left_index_hold, HMR_BILATERAL_INDEX_PROPERTIES)
        HMR_HOLD(left_index_hold, LAYER_LeftIndex)
        HMR_TAP(left_index_tap, LEFT_INDEX_KEY)
        #define LeftIndex(key) left_index_bilateral INDEX_FINGER_MOD key

        HMR_RIGHT_BILATERAL(right_index_bilateral, &right_index_hold, HMR_BILATERAL_INDEX_PROPERTIES)
        HMR_HOLD(right_index_hold, LAYER_RightIndex)
        HMR_TAP(right_index_tap, RIGHT_INDEX_KEY)
        #define RightIndex(key) right_index_bilateral INDEX_FINGER_MOD key

        HMR_LEFT_BILATERAL_2ND_LEVER(left_ring1_chord_bilateral, &left_ring1_tap, HMR_BILATERAL_HOMEY_PROPERTIES)
        #define LeftRing1Pinky left_ring1_chord_bilateral PINKY_FINGER_MOD LEFT_PINKY_KEY

        HMR_LEFT_BILATERAL_2ND_LEVER(left_middy_chord_bilateral, &left_middy_tap, HMR_BILATERAL_HOMEY_PROPERTIES)
        #define LeftMiddyPinky left_middy_chord_bilateral PINKY_FINGER_MOD LEFT_PINKY_KEY

        HMR_LEFT_BILATERAL_2ND_LEVER(left_index_chord_bilateral, &left_index_tap, HMR_BILATERAL_INDEX_PROPERTIES)
        #define LeftIndexPinky left_index_chord_bilateral PINKY_FINGER_MOD LEFT_PINKY_KEY

        HMR_RIGHT_BILATERAL_2ND_LEVER(right_ring1_chord_bilateral, &right_ring1_tap, HMR_BILATERAL_HOMEY_PROPERTIES)
        #define RightRing1Pinky right_ring1_chord_bilateral PINKY_FINGER_MOD RIGHT_PINKY_KEY

        HMR_RIGHT_BILATERAL_2ND_LEVER(right_middy_chord_bilateral, &right_middy_tap, HMR_BILATERAL_HOMEY_PROPERTIES)
        #define RightMiddyPinky right_middy_chord_bilateral PINKY_FINGER_MOD RIGHT_PINKY_KEY

        HMR_RIGHT_BILATERAL_2ND_LEVER(right_index_chord_bilateral, &right_index_tap, HMR_BILATERAL_INDEX_PROPERTIES)
        #define RightIndexPinky right_index_chord_bilateral PINKY_FINGER_MOD RIGHT_PINKY_KEY

        HMR_LEFT_BILATERAL_2ND_LEVER(left_pinky_chord_bilateral, &left_pinky_tap, HMR_BILATERAL_HOMEY_PROPERTIES)
        #define LeftPinkyRing1 left_pinky_chord_bilateral RING1_FINGER_MOD LEFT_RING1_KEY

        #define LeftMiddyRing1 left_middy_chord_bilateral RING1_FINGER_MOD LEFT_RING1_KEY

        #define LeftIndexRing1 left_index_chord_bilateral RING1_FINGER_MOD LEFT_RING1_KEY

        HMR_RIGHT_BILATERAL_2ND_LEVER(right_pinky_chord_bilateral, &right_pinky_tap, HMR_BILATERAL_HOMEY_PROPERTIES)
        #define RightPinkyRing1 right_pinky_chord_bilateral RING1_FINGER_MOD RIGHT_RING1_KEY

        #define RightMiddyRing1 right_middy_chord_bilateral RING1_FINGER_MOD RIGHT_RING1_KEY

        #define RightIndexRing1 right_index_chord_bilateral RING1_FINGER_MOD RIGHT_RING1_KEY

        #define LeftPinkyMiddy left_pinky_chord_bilateral MIDDY_FINGER_MOD LEFT_MIDDY_KEY

        #define LeftRing1Middy left_ring1_chord_bilateral MIDDY_FINGER_MOD LEFT_MIDDY_KEY

        #define LeftIndexMiddy left_index_chord_bilateral MIDDY_FINGER_MOD LEFT_MIDDY_KEY

        #define RightPinkyMiddy right_pinky_chord_bilateral MIDDY_FINGER_MOD RIGHT_MIDDY_KEY

        #define RightRing1Middy right_ring1_chord_bilateral MIDDY_FINGER_MOD RIGHT_MIDDY_KEY

        #define RightIndexMiddy right_index_chord_bilateral MIDDY_FINGER_MOD RIGHT_MIDDY_KEY

        #define LeftPinkyIndex left_pinky_chord_bilateral INDEX_FINGER_MOD LEFT_INDEX_KEY

        #define LeftRing1Index left_ring1_chord_bilateral INDEX_FINGER_MOD LEFT_INDEX_KEY

        #define LeftMiddyIndex left_middy_chord_bilateral INDEX_FINGER_MOD LEFT_INDEX_KEY

        #define RightPinkyIndex right_pinky_chord_bilateral INDEX_FINGER_MOD RIGHT_INDEX_KEY

        #define RightRing1Index right_ring1_chord_bilateral INDEX_FINGER_MOD RIGHT_INDEX_KEY

        #define RightMiddyIndex right_middy_chord_bilateral  INDEX_FINGER_MOD RIGHT_INDEX_KEY

        //
        // Thumb cluster hold-tap keys for Miryoku layers
        //
        thumb: thumb_layer_access {
            compatible = "zmk,behavior-hold-tap";
            flavor = THUMB_HOLDING_TYPE;
            tapping-term-ms = <THUMB_HOLDING_TIME>;
            quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
        thumb_lower_shift: lower_layer_or_sticky_shift {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            tapping-term-ms = <THUMB_HOLDING_TIME>;
            #binding-cells = <2>;
            bindings = <&mo>, <&sticky_key_oneshot>;
        };
        space: thumb_layer_access_spacebar {
            compatible = "zmk,behavior-hold-tap";
            flavor = SPACE_HOLDING_TYPE;
            tapping-term-ms = <SPACE_HOLDING_TIME>;
            quick-tap-ms = <SPACE_REPEAT_DECAY>; // enable repeat
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };

        //////////////////////////////////////////////////////////////////////////
        //
        // &sk (sticky key) variant that is truly one-shot
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // STICKY_1SHOT_DECAY defines how much time you have left (milliseconds)
        // after tapping a sticky key before it expires (won't apply to next tap).
        //
        #ifndef STICKY_1SHOT_DECAY
        #define STICKY_1SHOT_DECAY 500
        #endif

        sticky_key_oneshot: sticky_key_oneshot_macro {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
                = <&macro_param_1to1>
                , <&macro_tap &sticky_key_quickrel MACRO_PLACEHOLDER>
                ;
        };
        sticky_key_quickrel: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <STICKY_1SHOT_DECAY>;
            quick-release;
            ignore-modifiers;
        };

        //////////////////////////////////////////////////////////////////////////
        //
        // ZMK global overrides
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // CapsWord - ported from Pascal Getreuer's extension for QMK
        // - https://zmk.dev/docs/behaviors/caps-word
        // - https://getreuer.info/posts/keyboards/caps-word/index.html
        //
        behavior_caps_word {
            continue-list = <
                UNDERSCORE MINUS
                BACKSPACE DELETE
                N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
            >;
        };

    };

    macros {

        //
        // Linux Magic System Request Key - hold this down and type REISUB
        // - https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html
        // - https://github.com/manna-harbour/miryoku/discussions/259
        //
        ZMK_MACRO(linux_magic_sysrq,
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_press &mo 0 &kp RALT>
                , <&macro_tap &kp PRINTSCREEN>
                , <&macro_pause_for_release>
                , <&macro_release &mo 0 &kp RALT>
                ;
        )

        //
        // Mod+Tab application switcher - hold this down to keep menu open
        //
        mod_tab: mod_tab_switcher {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &kp MACRO_PLACEHOLDER>
                , <&macro_tap &kp TAB>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &kp MACRO_PLACEHOLDER>
                ;
        };
        mod_tab_chord: mod_tab_switcher_chord {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
                = <&macro_param_2to1>
                , <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_param_1to1>
                , <&macro_press &mod_tab MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &mod_tab MACRO_PLACEHOLDER>
                , <&macro_param_2to1>
                , <&macro_release &mo MACRO_PLACEHOLDER>
                ;
        };

        //////////////////////////////////////////////////////////////////////////
        //
        // Approximation of Pascal Getreuer's Select Word macro from QMK
        // - https://getreuer.info/posts/keyboards/select-word/index.html
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // SELECT_WORD_DELAY defines how long the macro waits (milliseconds)
        // after moving the cursor before it selects a word.  A larger delay
        // may allow the macro to move to the next word upon each invocation.
        //
        #ifndef SELECT_WORD_DELAY
        #define SELECT_WORD_DELAY 1
        #endif

        ZMK_MACRO(select_none,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
        )

        //
        // select a word (jumps to next word upon each successive invocation)
        //
        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_word_right>, <&select_word_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(select_word_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _W(RIGHT) &kp _W(LEFT) &kp _W(LS(RIGHT))>;
        )
        ZMK_MACRO(select_word_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _W(LEFT) &kp _W(RIGHT) &kp _W(LS(LEFT))>;
        )

        //
        // extend current selection by one word
        //
        extend_word: extend_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_word_right>, <&extend_word_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(extend_word_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _W(LS(RIGHT))>;
        )
        ZMK_MACRO(extend_word_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _W(LS(LEFT))>;
        )

        //
        // select current line
        //
        select_line: select_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_line_right>, <&select_line_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(select_line_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _HOME &kp LS(_END)>;
        )
        ZMK_MACRO(select_line_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _END &kp LS(_HOME)>;
        )

        //
        // extend current selection by one line
        //
        extend_line: extend_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_line_right>, <&extend_line_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(extend_line_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp LS(DOWN) &kp LS(_END)>;
        )
        ZMK_MACRO(extend_line_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp LS(UP) &kp LS(_HOME)>;
        )
    };
};

/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Engrammer {
            bindings = <
// ╭──────────────────────┬────────────────┬────────────────┬────────────────┬────────────────╮                                                                                                                                                                                                                    ╭─────────────────┬─────────────────┬─────────────────┬─────────────────┬──────────────────────╮
     &kp F1                 &kp F2           &kp F3           &kp F4           &kp F5                                                                                                                                                                                                                                &kp F6            &kp F7            &kp F8            &kp F9            &kp F10
// ├──────────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────╮                                                                                                                                                                                        ╭──────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┼──────────────────────┤
     &kp EQUAL              &kp N1           &kp N2           &kp N3           &kp N4           &kp N5                                                                                                                                                                                                    &kp N6     &kp N7            &kp N8            &kp N9            &kp N0            &kp BSLH
// ├──────────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤                                                                                                                                                                                        ├──────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┼──────────────────────┤
     &none                  &kp B            &kp Y            &kp O            &kp U            &kp SQT                                                                                                                                                                                                   &kp SEMI   &kp L             &kp D             &kp W             &kp V             &none
// ├──────────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤                                                                                                                                                                                        ├──────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┼──────────────────────┤
     &caps_word             &LeftPinky (C)   &LeftRing1 (I)   &LeftMiddy (E)   &LeftIndex (A)   &kp COMMA                                                                                                                                                                                                 &kp DOT    &RightIndex (H)   &RightMiddy (T)   &RightRing1 (S)   &RightPinky (N)   &kp Q
// ├──────────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤ ╭───────────────────────────────┬──────────────────────────────┬─────────────────────────────────────╮ ╭─────────────────────────────────────┬───────────┬───────────────────────────╮ ├──────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┼──────────────────────┤
     &kp LSHFT              &kp G            &kp X            &kp J            &kp K            &kp MINUS          &thumb LAYER_Number ESC         &kp LEFT                       &kp DOWN                                &kp UP                                &kp RIGHT   &thumb LAYER_System ENTER     &kp FSLH   &kp R             &kp M             &kp F             &kp P             &kp RSHFT
// ├──────────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────╯ ├───────────────────────────────┼──────────────────────────────┼─────────────────────────────────────┤ ├─────────────────────────────────────┼───────────┼───────────────────────────┤ ╰──────────┼─────────────────┼─────────────────┼─────────────────┼─────────────────┼──────────────────────┤
     &magic LAYER_Magic 0   &kp HOME         &kp PG_UP        &kp PG_DN        &kp GRAVE                           &thumb LAYER_Cursor BACKSPACE   &thumb LAYER_Function DELETE   &thumb_lower_shift LAYER_Lower LSFT     &thumb_lower_shift LAYER_Lower LSFT   &none       &space LAYER_Symbol SPACE                &kp TAB           &kp LBKT          &kp RBKT          &kp Z             &magic LAYER_Magic 0
// ╰──────────────────────┴────────────────┴────────────────┴────────────────┴────────────────╯                  ╰───────────────────────────────┴──────────────────────────────┴─────────────────────────────────────╯ ╰─────────────────────────────────────┴───────────┴───────────────────────────╯            ╰─────────────────┴─────────────────┴─────────────────┴─────────────────┴──────────────────────╯
            >;
        };

        layer_Typing {
            bindings = <
// ╭────────┬────────────────────┬────────────────────┬────────────────────┬────────────────────╮                                                                                                                                ╭─────────────────────┬─────────────────────┬─────────────────────┬─────────────────────┬────────╮
     &trans   &trans               &trans               &trans               &trans                                                                                                                                                &trans                &trans                &trans                &trans                &trans
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────╮                                                                                                      ╭────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &trans   &trans               &trans               &trans               &trans               &trans                                                                                                                  &trans   &trans                &trans                &trans                &trans                &trans
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────┤                                                                                                      ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &trans   &trans               &trans               &trans               &trans               &trans                                                                                                                  &trans   &trans                &trans                &trans                &trans                &trans
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────┤                                                                                                      ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &trans   &kp LEFT_PINKY_KEY   &kp LEFT_RING1_KEY   &kp LEFT_MIDDY_KEY   &kp LEFT_INDEX_KEY   &trans                                                                                                                  &trans   &kp RIGHT_INDEX_KEY   &kp RIGHT_MIDDY_KEY   &kp RIGHT_RING1_KEY   &kp RIGHT_PINKY_KEY   &trans
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────┤ ╭───────────────┬───────────────┬───────────────────╮ ╭───────────────────┬────────┬───────────────╮ ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &trans   &trans               &trans               &trans               &trans               &trans             &kp KEY_LH_T1   &trans          &trans                &trans              &trans   &kp KEY_RH_T1     &trans   &trans                &trans                &trans                &trans                &trans
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────────────╯ ├───────────────┼───────────────┼───────────────────┤ ├───────────────────┼────────┼───────────────┤ ╰────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &trans   &trans               &trans               &trans               &trans                                  &kp KEY_LH_T4   &kp KEY_LH_T5   &tog LAYER_Typing     &tog LAYER_Typing   &trans   &kp KEY_RH_T4              &trans                &trans                &trans                &trans                &trans
// ╰────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────╯                  ╰───────────────┴───────────────┴───────────────────╯ ╰───────────────────┴────────┴───────────────╯          ╰─────────────────────┴─────────────────────┴─────────────────────┴─────────────────────┴────────╯
            >;
        };

        layer_LeftPinky {
            bindings = <
// ╭─────────────────────────────┬─────────────────────────────┬─────────────────────────────┬─────────────────────────────┬─────────────────────────────╮                                                                                                  ╭─────────────────────┬─────────────────────┬─────────────────────┬─────────────────────┬────────╮
     &left_pinky_tap KEY_LH_C6R1   &left_pinky_tap KEY_LH_C5R1   &left_pinky_tap KEY_LH_C4R1   &left_pinky_tap KEY_LH_C3R1   &left_pinky_tap KEY_LH_C2R1                                                                                                      &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────╮                                                           ╭────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_pinky_tap KEY_LH_C6R2   &left_pinky_tap KEY_LH_C5R2   &left_pinky_tap KEY_LH_C4R2   &left_pinky_tap KEY_LH_C3R2   &left_pinky_tap KEY_LH_C2R2   &left_pinky_tap KEY_LH_C1R2                                                               &trans   &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┤                                                           ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_pinky_tap KEY_LH_C6R3   &left_pinky_tap KEY_LH_C5R3   &left_pinky_tap KEY_LH_C4R3   &left_pinky_tap KEY_LH_C3R3   &left_pinky_tap KEY_LH_C2R3   &left_pinky_tap KEY_LH_C1R3                                                               &trans   &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┤                                                           ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_pinky_tap KEY_LH_C6R4   &none                         &LeftPinkyRing1               &LeftPinkyMiddy               &LeftPinkyIndex               &left_pinky_tap KEY_LH_C1R4                                                               &trans   &kp RIGHT_INDEX_KEY   &kp RIGHT_MIDDY_KEY   &kp RIGHT_RING1_KEY   &kp RIGHT_PINKY_KEY   &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┤ ╭────────┬────────┬────────╮ ╭────────┬────────┬────────╮ ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_pinky_tap KEY_LH_C6R5   &left_pinky_tap KEY_LH_C5R5   &left_pinky_tap KEY_LH_C4R5   &left_pinky_tap KEY_LH_C3R5   &left_pinky_tap KEY_LH_C2R5   &left_pinky_tap KEY_LH_C1R5     &trans   &trans   &trans     &trans   &trans   &trans     &trans   &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────╯ ├────────┼────────┼────────┤ ├────────┼────────┼────────┤ ╰────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &trans                        &left_pinky_tap KEY_LH_C5R6   &left_pinky_tap KEY_LH_C4R6   &left_pinky_tap KEY_LH_C3R6   &left_pinky_tap KEY_LH_C2R6                                   &trans   &trans   &trans     &trans   &trans   &trans              &trans                &trans                &trans                &trans                &trans
// ╰─────────────────────────────┴─────────────────────────────┴─────────────────────────────┴─────────────────────────────┴─────────────────────────────╯                               ╰────────┴────────┴────────╯ ╰────────┴────────┴────────╯          ╰─────────────────────┴─────────────────────┴─────────────────────┴─────────────────────┴────────╯
            >;
        };

        layer_LeftRing1 {
            bindings = <
// ╭─────────────────────────────┬─────────────────────────────┬─────────────────────────────┬─────────────────────────────┬─────────────────────────────╮                                                                                                  ╭─────────────────────┬─────────────────────┬─────────────────────┬─────────────────────┬────────╮
     &left_ring1_tap KEY_LH_C6R1   &left_ring1_tap KEY_LH_C5R1   &left_ring1_tap KEY_LH_C4R1   &left_ring1_tap KEY_LH_C3R1   &left_ring1_tap KEY_LH_C2R1                                                                                                      &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────╮                                                           ╭────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_ring1_tap KEY_LH_C6R2   &left_ring1_tap KEY_LH_C5R2   &left_ring1_tap KEY_LH_C4R2   &left_ring1_tap KEY_LH_C3R2   &left_ring1_tap KEY_LH_C2R2   &left_ring1_tap KEY_LH_C1R2                                                               &trans   &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┤                                                           ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_ring1_tap KEY_LH_C6R3   &left_ring1_tap KEY_LH_C5R3   &left_ring1_tap KEY_LH_C4R3   &left_ring1_tap KEY_LH_C3R3   &left_ring1_tap KEY_LH_C2R3   &left_ring1_tap KEY_LH_C1R3                                                               &trans   &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┤                                                           ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_ring1_tap KEY_LH_C6R4   &LeftRing1Pinky               &none                         &LeftRing1Middy               &LeftRing1Index               &left_ring1_tap KEY_LH_C1R4                                                               &trans   &kp RIGHT_INDEX_KEY   &kp RIGHT_MIDDY_KEY   &kp RIGHT_RING1_KEY   &kp RIGHT_PINKY_KEY   &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┤ ╭────────┬────────┬────────╮ ╭────────┬────────┬────────╮ ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_ring1_tap KEY_LH_C6R5   &left_ring1_tap KEY_LH_C5R5   &left_ring1_tap KEY_LH_C4R5   &left_ring1_tap KEY_LH_C3R5   &left_ring1_tap KEY_LH_C2R5   &left_ring1_tap KEY_LH_C1R5     &trans   &trans   &trans     &trans   &trans   &trans     &trans   &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────╯ ├────────┼────────┼────────┤ ├────────┼────────┼────────┤ ╰────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &trans                        &left_ring1_tap KEY_LH_C5R6   &left_ring1_tap KEY_LH_C4R6   &left_ring1_tap KEY_LH_C3R6   &left_ring1_tap KEY_LH_C2R6                                   &trans   &trans   &trans     &trans   &trans   &trans              &trans                &trans                &trans                &trans                &trans
// ╰─────────────────────────────┴─────────────────────────────┴─────────────────────────────┴─────────────────────────────┴─────────────────────────────╯                               ╰────────┴────────┴────────╯ ╰────────┴────────┴────────╯          ╰─────────────────────┴─────────────────────┴─────────────────────┴─────────────────────┴────────╯
            >;
        };

        layer_LeftMiddy {
            bindings = <
// ╭─────────────────────────────┬─────────────────────────────┬─────────────────────────────┬─────────────────────────────┬─────────────────────────────╮                                                                                                  ╭─────────────────────┬─────────────────────┬─────────────────────┬─────────────────────┬────────╮
     &left_middy_tap KEY_LH_C6R1   &left_middy_tap KEY_LH_C5R1   &left_middy_tap KEY_LH_C4R1   &left_middy_tap KEY_LH_C3R1   &left_middy_tap KEY_LH_C2R1                                                                                                      &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────╮                                                           ╭────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_middy_tap KEY_LH_C6R2   &left_middy_tap KEY_LH_C5R2   &left_middy_tap KEY_LH_C4R2   &left_middy_tap KEY_LH_C3R2   &left_middy_tap KEY_LH_C2R2   &left_middy_tap KEY_LH_C1R2                                                               &trans   &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┤                                                           ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_middy_tap KEY_LH_C6R3   &left_middy_tap KEY_LH_C5R3   &left_middy_tap KEY_LH_C4R3   &left_middy_tap KEY_LH_C3R3   &left_middy_tap KEY_LH_C2R3   &left_middy_tap KEY_LH_C1R3                                                               &trans   &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┤                                                           ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_middy_tap KEY_LH_C6R4   &LeftMiddyPinky               &LeftMiddyRing1               &none                         &LeftMiddyIndex               &left_middy_tap KEY_LH_C1R4                                                               &trans   &kp RIGHT_INDEX_KEY   &kp RIGHT_MIDDY_KEY   &kp RIGHT_RING1_KEY   &kp RIGHT_PINKY_KEY   &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┤ ╭────────┬────────┬────────╮ ╭────────┬────────┬────────╮ ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_middy_tap KEY_LH_C6R5   &left_middy_tap KEY_LH_C5R5   &left_middy_tap KEY_LH_C4R5   &left_middy_tap KEY_LH_C3R5   &left_middy_tap KEY_LH_C2R5   &left_middy_tap KEY_LH_C1R5     &trans   &trans   &trans     &trans   &trans   &trans     &trans   &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────╯ ├────────┼────────┼────────┤ ├────────┼────────┼────────┤ ╰────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &trans                        &left_middy_tap KEY_LH_C5R6   &left_middy_tap KEY_LH_C4R6   &left_middy_tap KEY_LH_C3R6   &left_middy_tap KEY_LH_C2R6                                   &trans   &trans   &trans     &trans   &trans   &trans              &trans                &trans                &trans                &trans                &trans
// ╰─────────────────────────────┴─────────────────────────────┴─────────────────────────────┴─────────────────────────────┴─────────────────────────────╯                               ╰────────┴────────┴────────╯ ╰────────┴────────┴────────╯          ╰─────────────────────┴─────────────────────┴─────────────────────┴─────────────────────┴────────╯
            >;
        };

        layer_LeftIndex {
            bindings = <
// ╭─────────────────────────────┬─────────────────────────────┬─────────────────────────────┬─────────────────────────────┬─────────────────────────────╮                                                                                                  ╭─────────────────────┬─────────────────────┬─────────────────────┬─────────────────────┬────────╮
     &left_index_tap KEY_LH_C6R1   &left_index_tap KEY_LH_C5R1   &left_index_tap KEY_LH_C4R1   &left_index_tap KEY_LH_C3R1   &left_index_tap KEY_LH_C2R1                                                                                                      &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────╮                                                           ╭────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_index_tap KEY_LH_C6R2   &left_index_tap KEY_LH_C5R2   &left_index_tap KEY_LH_C4R2   &left_index_tap KEY_LH_C3R2   &left_index_tap KEY_LH_C2R2   &left_index_tap KEY_LH_C1R2                                                               &trans   &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┤                                                           ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_index_tap KEY_LH_C6R3   &left_index_tap KEY_LH_C5R3   &left_index_tap KEY_LH_C4R3   &left_index_tap KEY_LH_C3R3   &left_index_tap KEY_LH_C2R3   &left_index_tap KEY_LH_C1R3                                                               &trans   &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┤                                                           ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_index_tap KEY_LH_C6R4   &LeftIndexPinky               &LeftIndexRing1               &LeftIndexMiddy               &none                         &left_index_tap KEY_LH_C1R4                                                               &trans   &kp RIGHT_INDEX_KEY   &kp RIGHT_MIDDY_KEY   &kp RIGHT_RING1_KEY   &kp RIGHT_PINKY_KEY   &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┤ ╭────────┬────────┬────────╮ ╭────────┬────────┬────────╮ ├────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &left_index_tap KEY_LH_C6R5   &left_index_tap KEY_LH_C5R5   &left_index_tap KEY_LH_C4R5   &left_index_tap KEY_LH_C3R5   &left_index_tap KEY_LH_C2R5   &left_index_tap KEY_LH_C1R5     &trans   &trans   &trans     &trans   &trans   &trans     &trans   &trans                &trans                &trans                &trans                &trans
// ├─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────┼─────────────────────────────╯ ├────────┼────────┼────────┤ ├────────┼────────┼────────┤ ╰────────┼─────────────────────┼─────────────────────┼─────────────────────┼─────────────────────┼────────┤
     &trans                        &left_index_tap KEY_LH_C5R6   &left_index_tap KEY_LH_C4R6   &left_index_tap KEY_LH_C3R6   &left_index_tap KEY_LH_C2R6                                   &trans   &trans   &trans     &trans   &trans   &trans              &trans                &trans                &trans                &trans                &trans
// ╰─────────────────────────────┴─────────────────────────────┴─────────────────────────────┴─────────────────────────────┴─────────────────────────────╯                               ╰────────┴────────┴────────╯ ╰────────┴────────┴────────╯          ╰─────────────────────┴─────────────────────┴─────────────────────┴─────────────────────┴────────╯
            >;
        };

        layer_RightPinky {
            bindings = <
// ╭────────┬────────────────────┬────────────────────┬────────────────────┬────────────────────╮                                                                                                   ╭──────────────────────────────┬──────────────────────────────┬──────────────────────────────┬──────────────────────────────┬──────────────────────────────╮
     &trans   &trans               &trans               &trans               &trans                                                                                                                   &right_pinky_tap KEY_RH_C2R1   &right_pinky_tap KEY_RH_C3R1   &right_pinky_tap KEY_RH_C4R1   &right_pinky_tap KEY_RH_C5R1   &right_pinky_tap KEY_RH_C6R1
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────╮                                                           ╭──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans               &trans                                                               &right_pinky_tap KEY_RH_C1R2   &right_pinky_tap KEY_RH_C2R2   &right_pinky_tap KEY_RH_C3R2   &right_pinky_tap KEY_RH_C4R2   &right_pinky_tap KEY_RH_C5R2   &right_pinky_tap KEY_RH_C6R2
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────┤                                                           ├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans               &trans                                                               &right_pinky_tap KEY_RH_C1R3   &right_pinky_tap KEY_RH_C2R3   &right_pinky_tap KEY_RH_C3R3   &right_pinky_tap KEY_RH_C4R3   &right_pinky_tap KEY_RH_C5R3   &right_pinky_tap KEY_RH_C6R3
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────┤                                                           ├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &kp LEFT_PINKY_KEY   &kp LEFT_RING1_KEY   &kp LEFT_MIDDY_KEY   &kp LEFT_INDEX_KEY   &trans                                                               &right_pinky_tap KEY_RH_C1R4   &RightPinkyIndex               &RightPinkyMiddy               &RightPinkyRing1               &none                          &right_pinky_tap KEY_RH_C6R4
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────┤ ╭────────┬────────┬────────╮ ╭────────┬────────┬────────╮ ├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans               &trans     &trans   &trans   &trans     &trans   &trans   &trans     &right_pinky_tap KEY_RH_C1R5   &right_pinky_tap KEY_RH_C2R5   &right_pinky_tap KEY_RH_C3R5   &right_pinky_tap KEY_RH_C4R5   &right_pinky_tap KEY_RH_C5R5   &right_pinky_tap KEY_RH_C6R5
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────╯ ├────────┼────────┼────────┤ ├────────┼────────┼────────┤ ╰──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans                          &trans   &trans   &trans     &trans   &trans   &trans                                    &right_pinky_tap KEY_RH_C2R6   &right_pinky_tap KEY_RH_C3R6   &right_pinky_tap KEY_RH_C4R6   &right_pinky_tap KEY_RH_C5R6   &trans
// ╰────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────╯          ╰────────┴────────┴────────╯ ╰────────┴────────┴────────╯                                ╰──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────╯
            >;
        };

        layer_RightRing1 {
            bindings = <
// ╭────────┬────────────────────┬────────────────────┬────────────────────┬────────────────────╮                                                                                                   ╭──────────────────────────────┬──────────────────────────────┬──────────────────────────────┬──────────────────────────────┬──────────────────────────────╮
     &trans   &trans               &trans               &trans               &trans                                                                                                                   &right_ring1_tap KEY_RH_C2R1   &right_ring1_tap KEY_RH_C3R1   &right_ring1_tap KEY_RH_C4R1   &right_ring1_tap KEY_RH_C5R1   &right_ring1_tap KEY_RH_C6R1
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────╮                                                           ╭──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans               &trans                                                               &right_ring1_tap KEY_RH_C1R2   &right_ring1_tap KEY_RH_C2R2   &right_ring1_tap KEY_RH_C3R2   &right_ring1_tap KEY_RH_C4R2   &right_ring1_tap KEY_RH_C5R2   &right_ring1_tap KEY_RH_C6R2
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────┤                                                           ├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans               &trans                                                               &right_ring1_tap KEY_RH_C1R3   &right_ring1_tap KEY_RH_C2R3   &right_ring1_tap KEY_RH_C3R3   &right_ring1_tap KEY_RH_C4R3   &right_ring1_tap KEY_RH_C5R3   &right_ring1_tap KEY_RH_C6R3
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────┤                                                           ├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &kp LEFT_PINKY_KEY   &kp LEFT_RING1_KEY   &kp LEFT_MIDDY_KEY   &kp LEFT_INDEX_KEY   &trans                                                               &right_ring1_tap KEY_RH_C1R4   &RightRing1Index               &RightRing1Middy               &none                          &RightRing1Pinky               &right_ring1_tap KEY_RH_C6R4
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────┤ ╭────────┬────────┬────────╮ ╭────────┬────────┬────────╮ ├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans               &trans     &trans   &trans   &trans     &trans   &trans   &trans     &right_ring1_tap KEY_RH_C1R5   &right_ring1_tap KEY_RH_C2R5   &right_ring1_tap KEY_RH_C3R5   &right_ring1_tap KEY_RH_C4R5   &right_ring1_tap KEY_RH_C5R5   &right_ring1_tap KEY_RH_C6R5
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────╯ ├────────┼────────┼────────┤ ├────────┼────────┼────────┤ ╰──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans                          &trans   &trans   &trans     &trans   &trans   &trans                                    &right_ring1_tap KEY_RH_C2R6   &right_ring1_tap KEY_RH_C3R6   &right_ring1_tap KEY_RH_C4R6   &right_ring1_tap KEY_RH_C5R6   &trans
// ╰────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────╯          ╰────────┴────────┴────────╯ ╰────────┴────────┴────────╯                                ╰──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────╯
            >;
        };

        layer_RightMiddy {
            bindings = <
// ╭────────┬────────────────────┬────────────────────┬────────────────────┬────────────────────╮                                                                                                   ╭──────────────────────────────┬──────────────────────────────┬──────────────────────────────┬──────────────────────────────┬──────────────────────────────╮
     &trans   &trans               &trans               &trans               &trans                                                                                                                   &right_middy_tap KEY_RH_C2R1   &right_middy_tap KEY_RH_C3R1   &right_middy_tap KEY_RH_C4R1   &right_middy_tap KEY_RH_C5R1   &right_middy_tap KEY_RH_C6R1
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────╮                                                           ╭──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans               &trans                                                               &right_middy_tap KEY_RH_C1R2   &right_middy_tap KEY_RH_C2R2   &right_middy_tap KEY_RH_C3R2   &right_middy_tap KEY_RH_C4R2   &right_middy_tap KEY_RH_C5R2   &right_middy_tap KEY_RH_C6R2
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────┤                                                           ├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans               &trans                                                               &right_middy_tap KEY_RH_C1R3   &right_middy_tap KEY_RH_C2R3   &right_middy_tap KEY_RH_C3R3   &right_middy_tap KEY_RH_C4R3   &right_middy_tap KEY_RH_C5R3   &right_middy_tap KEY_RH_C6R3
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────┤                                                           ├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &kp LEFT_PINKY_KEY   &kp LEFT_RING1_KEY   &kp LEFT_MIDDY_KEY   &kp LEFT_INDEX_KEY   &trans                                                               &right_middy_tap KEY_RH_C1R4   &RightMiddyIndex               &none                          &RightMiddyRing1               &RightMiddyPinky               &right_middy_tap KEY_RH_C6R4
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────┤ ╭────────┬────────┬────────╮ ╭────────┬────────┬────────╮ ├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans               &trans     &trans   &trans   &trans     &trans   &trans   &trans     &right_middy_tap KEY_RH_C1R5   &right_middy_tap KEY_RH_C2R5   &right_middy_tap KEY_RH_C3R5   &right_middy_tap KEY_RH_C4R5   &right_middy_tap KEY_RH_C5R5   &right_middy_tap KEY_RH_C6R5
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────╯ ├────────┼────────┼────────┤ ├────────┼────────┼────────┤ ╰──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans                          &trans   &trans   &trans     &trans   &trans   &trans                                    &right_middy_tap KEY_RH_C2R6   &right_middy_tap KEY_RH_C3R6   &right_middy_tap KEY_RH_C4R6   &right_middy_tap KEY_RH_C5R6   &trans
// ╰────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────╯          ╰────────┴────────┴────────╯ ╰────────┴────────┴────────╯                                ╰──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────╯
            >;
        };

        layer_RightIndex {
            bindings = <
// ╭────────┬────────────────────┬────────────────────┬────────────────────┬────────────────────╮                                                                                                   ╭──────────────────────────────┬──────────────────────────────┬──────────────────────────────┬──────────────────────────────┬──────────────────────────────╮
     &trans   &trans               &trans               &trans               &trans                                                                                                                   &right_index_tap KEY_RH_C2R1   &right_index_tap KEY_RH_C3R1   &right_index_tap KEY_RH_C4R1   &right_index_tap KEY_RH_C5R1   &right_index_tap KEY_RH_C6R1
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────╮                                                           ╭──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans               &trans                                                               &right_index_tap KEY_RH_C1R2   &right_index_tap KEY_RH_C2R2   &right_index_tap KEY_RH_C3R2   &right_index_tap KEY_RH_C4R2   &right_index_tap KEY_RH_C5R2   &right_index_tap KEY_RH_C6R2
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────┤                                                           ├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans               &trans                                                               &right_index_tap KEY_RH_C1R3   &right_index_tap KEY_RH_C2R3   &right_index_tap KEY_RH_C3R3   &right_index_tap KEY_RH_C4R3   &right_index_tap KEY_RH_C5R3   &right_index_tap KEY_RH_C6R3
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────┤                                                           ├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &kp LEFT_PINKY_KEY   &kp LEFT_RING1_KEY   &kp LEFT_MIDDY_KEY   &kp LEFT_INDEX_KEY   &trans                                                               &right_index_tap KEY_RH_C1R4   &none                          &RightIndexMiddy               &RightIndexRing1               &RightIndexPinky               &right_index_tap KEY_RH_C6R4
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────┤ ╭────────┬────────┬────────╮ ╭────────┬────────┬────────╮ ├──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans               &trans     &trans   &trans   &trans     &trans   &trans   &trans     &right_index_tap KEY_RH_C1R5   &right_index_tap KEY_RH_C2R5   &right_index_tap KEY_RH_C3R5   &right_index_tap KEY_RH_C4R5   &right_index_tap KEY_RH_C5R5   &right_index_tap KEY_RH_C6R5
// ├────────┼────────────────────┼────────────────────┼────────────────────┼────────────────────┼────────╯ ├────────┼────────┼────────┤ ├────────┼────────┼────────┤ ╰──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┼──────────────────────────────┤
     &trans   &trans               &trans               &trans               &trans                          &trans   &trans   &trans     &trans   &trans   &trans                                    &right_index_tap KEY_RH_C2R6   &right_index_tap KEY_RH_C3R6   &right_index_tap KEY_RH_C4R6   &right_index_tap KEY_RH_C5R6   &trans
// ╰────────┴────────────────────┴────────────────────┴────────────────────┴────────────────────╯          ╰────────┴────────┴────────╯ ╰────────┴────────┴────────╯                                ╰──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────┴──────────────────────────────╯
            >;
        };

        layer_Number {
            bindings = <
      &none                 &none                 &none                 &none                 &none                                                                                                                                                  &none       &none       &none          &none      &none
      &none             &kp UNDER                 &kp D                 &kp E                 &kp F          &none                                                                                                                   &kp CARET    &kp DLLR    &kp HASH      &kp AT       &kp EXCL   &kp PIPE
 &caps_word                 &kp X                 &kp A                 &kp B                 &kp C  &kp _KP_ENTER                                                                                                                   &kp PRCNT  &kp _KP_N7  &kp _KP_N8  &kp _KP_N9      &kp COLON      &kp K
 &kp KP_NUM  &kp PINKY_FINGER_MOD  &kp RING1_FINGER_MOD  &kp MIDDY_FINGER_MOD  &kp INDEX_FINGER_MOD        &kp TAB                                                                                                                &kp _KP_PLUS  &kp _KP_N4  &kp _KP_N5  &kp _KP_N6  &kp _KP_MINUS      &kp J
  &kp _UNDO             &kp _C(A)          &select_line          &select_word              &kp BSPC      &kp SPACE                               &none   &none              &none         &kp LT       &kp GT  &kp _KP_EQUAL  &kp _KP_ASTERISK  &kp _KP_N1  &kp _KP_N2  &kp _KP_N3  &kp _KP_SLASH  &kp LS(G)
  &kp _REDO             &sk LSHFT          &extend_line          &extend_word               &kp DEL                 &mod_tab_chord _A_TAB LAYER_Cursor   &none  &tog LAYER_Number  &kp _KP_COMMA  &kp _KP_DOT     &kp _KP_N0                        &trans      &trans      &trans         &trans  &kp TILDE
            >;
        };

        layer_Cursor {
            bindings = <
     &none           &none         &none         &none           &none                                                                                                                     &none           &none           &none      &none        &none
     &none           &none         &none         &none         &kp DEL     &kp INS                                                                                            &kp INS    &kp DEL           &none           &none      &none        &none
 &kp _C(K)       &sk LSHFT     &kp _REDO     &kp _UNDO        &kp BSPC    &kp _CUT                                                                                           &kp _CUT   &kp BSPC       &kp _UNDO       &kp _REDO  &sk LSHFT    &kp _C(K)
 &kp _C(L)       &kp _C(A)  &select_line  &select_word       &kp _FIND   &kp _COPY                                                                                          &kp _COPY   &kp LEFT          &kp UP        &kp DOWN  &kp RIGHT    &kp _C(L)
 &kp _C(J)  &kp _FIND_PREV  &extend_line  &extend_word  &kp _FIND_NEXT  &kp _PASTE  &kp TAB    &mod_tab LCTL    &mod_tab _G_TAB  &select_none  &extend_line  &extend_word  &kp _PASTE   &kp HOME       &kp PG_UP       &kp PG_DN    &kp END    &kp _C(J)
 &kp _C(H)           &none         &none         &none           &none                &none  &mod_tab _A_TAB  &tog LAYER_Cursor     &kp _C(A)  &select_line  &select_word              &kp _FIND  &kp _FIND_PREV  &kp _FIND_NEXT  &kp _C(H)  &kp LG(DOT)
            >;
        };

        layer_Function {
            bindings = <
    &none                 &none                 &none                 &none                 &none                                                                                                                 &none         &none         &none          &none           &none
    &none                 &none                 &none                 &none                 &none   &none                                                                               &kp C_MEDIA_HOME     &kp C_PLAY    &kp C_PREV    &kp C_NEXT     &kp C_STOP     &kp C_EJECT
    &none                 &none                 &none                 &none                 &none   &none                                                                                      &kp K_WWW         &kp F7        &kp F8        &kp F9        &kp F10         &kp F13
 &kp CAPS  &kp PINKY_FINGER_MOD  &kp RING1_FINGER_MOD  &kp MIDDY_FINGER_MOD  &kp INDEX_FINGER_MOD   &none                                                                                     &kp K_CALC         &kp F4        &kp F5        &kp F6        &kp F11         &kp F14
    &none                 &none                 &none                 &none                 &none   &none   &none   &none                &none  &kp C_PREV    &kp C_NEXT      &kp C_PP    &kp C_AL_FILES         &kp F1        &kp F2        &kp F3        &kp F12         &kp F15
    &none                 &none                 &none                 &none                 &none           &none   &none  &tog LAYER_Function  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP                    &kp C_BRI_MAX  &kp C_BRI_UP  &kp C_BRI_DN  &kp C_BRI_MIN  &kp C_BRI_AUTO
            >;
        };

        layer_Symbol {
            bindings = <
    &none      &none      &none     &none     &none                                                                                                      &none                 &none                 &none                 &none   &none
    &none      &none      &none     &none     &none     &none                                                                      &none                 &none                 &none                 &none                 &none   &none
    &none   &kp LBRC   &kp LBKT  &kp RBKT  &kp RBRC  &kp EXCL                                                                     &trans  &kp INDEX_FINGER_MOD  &kp MIDDY_FINGER_MOD  &kp RING1_FINGER_MOD  &kp PINKY_FINGER_MOD   &none
 &kp HASH  &kp CARET  &kp EQUAL  &kp PLUS  &kp DLLR  &kp STAR                                                                     &trans              &kp BSPC               &kp TAB             &kp SPACE               &kp RET   &none
    &none   &kp PIPE   &kp LPAR  &kp RPAR  &kp AMPS    &kp AT   &kp BSLH    &kp DOT  &kp STAR              &none   &none   &none  &trans               &kp DEL           &kp LS(TAB)                 &none                 &none   &none
    &none      &none      &none     &none     &none            &kp PRCNT  &kp COLON  &kp SEMI  &tog LAYER_Symbol   &none   &none                        &trans                &trans                &trans                &trans   &none
            >;
        };

        layer_System {
            bindings = <
           &none            &none            &none            &none            &none                                                                                                                        &none                 &none                 &none                 &none   &none
           &none            &none            &none            &none            &none   &none                                                                                          &none                 &none                 &none                 &none                 &none   &none
           &none            &none  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI            &none   &none                                                                                          &none                 &none                 &none                 &none                 &none   &none
 &rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF   &none                                                                                          &none  &kp INDEX_FINGER_MOD  &kp MIDDY_FINGER_MOD  &kp RING1_FINGER_MOD  &kp PINKY_FINGER_MOD   &none
           &none  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI   &none  &kp _LOCK  &kp _SLEEP       &kp _POWER              &none   &none               &none   &none                 &none                 &none                 &none                 &none   &none
           &none            &none            &none            &none            &none          &kp PSCRN    &kp SLCK  &kp PAUSE_BREAK  &tog LAYER_System   &none  &linux_magic_sysrq                         &none                 &none                 &none                 &none   &none
            >;
        };

        layer_Gaming {
            bindings = <
    &trans     &trans  &trans  &trans  &trans                                                                                             &trans  &trans     &trans   &trans    &trans
    &trans     &trans  &trans  &trans  &trans   &trans                                                                            &trans  &trans  &trans     &trans   &trans    &trans
 &kp MINUS  &kp GRAVE   &kp B   &kp N   &kp M  &kp SQT                                                                             &kp B   &kp N   &kp M  &kp COMMA  &kp DOT  &kp FSLH
     &kp T    &kp TAB   &kp Q   &kp W   &kp E    &kp R                                                                             &kp T   &kp Y   &kp U      &kp I    &kp O     &kp P
     &kp G  &kp LSHFT   &kp A   &kp S   &kp D    &kp F    &kp ESC   &kp RET  &kp PAUSE_BREAK           &kp BSPC  &kp DEL  &trans   &kp G   &kp H   &kp J      &kp K    &kp L  &kp SEMI
     &kp V  &kp LCTRL   &kp Z   &kp X   &kp C           &kp SPACE  &kp LALT         &kp LGUI  &tog LAYER_Gaming   &trans  &trans          &trans  &trans     &trans   &trans    &trans
            >;
        };

        layer_Factory {
            bindings = <
               &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                  &kp F6     &kp F7    &kp F8    &kp F9    &kp F10
            &kp EQUAL    &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                                  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
              &kp TAB     &kp Q    &kp W     &kp E      &kp R   &kp T                                                                   &kp Y   &kp U      &kp I     &kp O     &kp P   &kp BSLH
              &kp ESC     &kp A    &kp S     &kp D      &kp F   &kp G                                                                   &kp H   &kp J      &kp K     &kp L  &kp SEMI    &kp SQT
            &kp GRAVE     &kp Z    &kp X     &kp C      &kp V   &kp B  &kp LSHFT  &kp LCTRL    &lower  &kp LGUI  &kp RCTRL  &kp RSHFT   &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp PG_UP
 &magic LAYER_Magic 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT           &kp BSPC    &kp DEL  &kp LALT  &kp RALT    &kp RET  &kp SPACE          &kp UP   &kp DOWN  &kp LBKT  &kp RBKT  &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
         &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                                                                              &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none       &kp PAUSE_BREAK
               &trans         &none           &none           &none            &none   &kp HOME                                                                                                                         &kp LPAR  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY       &kp PRINTSCREEN
               &trans         &none           &none    &kp UP_ARROW            &none    &kp END                                                                                                                         &kp RPAR   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS        &kp SCROLLLOCK
               &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                                                                                      &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &kp KP_NUM
             &kp LALT     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &tog LAYER_Number    &tog LAYER_Gaming  &tog LAYER_Typing  &tog LAYER_Typing  &tog LAYER_Gaming  &tog LAYER_System    &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER              &kp LALT
 &magic LAYER_Magic 0      &kp CAPS         &kp INS         &kp F11            &none             &tog LAYER_Cursor  &tog LAYER_Function   &tog LAYER_Lower   &tog LAYER_Lower              &none  &tog LAYER_Symbol                    &none     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER  &magic LAYER_Magic 0
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &to 0            &to 1            &to 2            &to 3            &to 4            &to 5                                                         &to 6   &to 7   &to 8   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3       &tog 16   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};

